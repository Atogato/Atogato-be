name: Atogato CICD Pipeline
on:
  push:
     branches: [ "main" ]  
  pull_request:
     branches: [ "main" ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  AWS_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
  GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
  KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
  KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Apply Secret Keys in application.yml
        run: |
          sed -i "s/ACCESS_KEY_PLACEHOLDER/${ACCESS_KEY}/g" ./backend/src/main/resources/application-deployment.yml
          sed -i "s/SECRET_KEY_PLACEHOLDER/${SECRET_KEY}/g" ./backend/src/main/resources/application-deployment.yml
          sed -i "s/GOOGLE_CLIENT_ID_PLACEHOLDER/${GOOGLE_CLIENT_ID}/g" ./backend/src/main/resources/application-deployment.yml
          sed -i "s/GOOGLE_CLIENT_SECRET_PLACEHOLDER/${GOOGLE_CLIENT_SECRET}/g" ./backend/src/main/resources/application-deployment.yml
          sed -i "s/KAKAO_CLIENT_ID_PLACEHOLDER/${KAKAO_CLIENT_ID}/g" ./backend/src/main/resources/application-deployment.yml
          sed -i "s/KAKAO_CLIENT_SECRET_PLACEHOLDER/${KAKAO_CLIENT_SECRET}/g" ./backend/src/main/resources/application-deployment.yml
#          echo "BACKEND_API_URL=${BACKEND_API_URL}" >> ./frontend/.env
#          echo "BACKEND_OAUTH_URL=${BACKEND_OAUTH_URL}" >> ./frontend/.env
#          echo "OAUTH_REDIRECT_URL=${OAUTH_REDIRECT_URL}" >> ./frontend/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (BE)
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          dockerfile: ./backend/Dockerfile
          tags: 9907daniel/project_atogato-backend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set permissions for private key
        run: |
          echo "${{ env.AWS_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Copy docker-compose file to remote server
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem docker-compose.yml ubuntu@13.125.101.0:~

      - name: Copy nginx conf to remote server
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem ./nginx/conf/default.conf ubuntu@13.125.101.0:/home/ubuntu/nginx/conf/

      - name: Stop NGINX if running
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.125.101.0 'sudo service nginx stop'

      - name: Deploy Docker Compose services
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.125.101.0   <<EOF
          sudo docker-compose pull
          sudo docker-compose down
          sudo docker-compose up -d
          EOF

      - name: Prune unused Docker resources
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@13.125.101.0 'sudo docker system prune -f'
